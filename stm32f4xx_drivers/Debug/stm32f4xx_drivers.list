
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008cc  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000a64  08000a64  00001a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a70  08000a70  00001a78  2**0
                  CONTENTS
  4 .ARM          00000000  08000a70  08000a70  00001a78  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a70  08000a78  00001a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a70  08000a70  00001a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000a74  08000a74  00001a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000a78  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000a78  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY
 12 .debug_info   000013d6  00000000  00000000  00001aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000470  00000000  00000000  00002e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000140  00000000  00000000  000032e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000e3  00000000  00000000  00003428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000143b  00000000  00000000  0000350b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000168a  00000000  00000000  00004946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000058da  00000000  00000000  00005fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000b8aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000454  00000000  00000000  0000b8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  0000bd44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000a4c 	.word	0x08000a4c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000a4c 	.word	0x08000a4c

080001d8 <SPI_GPIOInit>:
PB9 - SPI2_NSS
ALT function mode : AF05
*/

void SPI_GPIOInit(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOC;
 80001de:	4b15      	ldr	r3, [pc, #84]	@ (8000234 <SPI_GPIOInit+0x5c>)
 80001e0:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001e2:	2302      	movs	r3, #2
 80001e4:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80001e6:	2305      	movs	r3, #5
 80001e8:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001ea:	2300      	movs	r3, #0
 80001ec:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80001ee:	2300      	movs	r3, #0
 80001f0:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001f2:	2302      	movs	r3, #2
 80001f4:	72bb      	strb	r3, [r7, #10]

	// SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 80001f6:	2307      	movs	r3, #7
 80001f8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 f881 	bl	8000304 <GPIO_Init>
	// MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000202:	2303      	movs	r3, #3
 8000204:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f87b 	bl	8000304 <GPIO_Init>
	// MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 800020e:	2302      	movs	r3, #2
 8000210:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f875 	bl	8000304 <GPIO_Init>

	// NSS
	SPIPins.pGPIOx = GPIOB;
 800021a:	4b07      	ldr	r3, [pc, #28]	@ (8000238 <SPI_GPIOInit+0x60>)
 800021c:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 800021e:	2309      	movs	r3, #9
 8000220:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	4618      	mov	r0, r3
 8000226:	f000 f86d 	bl	8000304 <GPIO_Init>
}
 800022a:	bf00      	nop
 800022c:	3710      	adds	r7, #16
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	40020800 	.word	0x40020800
 8000238:	40020400 	.word	0x40020400

0800023c <SPI2_Init>:

void SPI2_Init(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
 8000242:	4b0c      	ldr	r3, [pc, #48]	@ (8000274 <SPI2_Init+0x38>)
 8000244:	607b      	str	r3, [r7, #4]
	SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000246:	2300      	movs	r3, #0
 8000248:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800024a:	2301      	movs	r3, #1
 800024c:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8; // generates 2MHz clock
 800024e:	2302      	movs	r3, #2
 8000250:	72bb      	strb	r3, [r7, #10]
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000252:	2300      	movs	r3, #0
 8000254:	72fb      	strb	r3, [r7, #11]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000256:	2300      	movs	r3, #0
 8000258:	733b      	strb	r3, [r7, #12]
	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800025a:	2300      	movs	r3, #0
 800025c:	737b      	strb	r3, [r7, #13]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_EN; // NSS pin is not used in this pin configuration
 800025e:	2301      	movs	r3, #1
 8000260:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2Handle);
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f000 fae3 	bl	8000830 <SPI_Init>
}
 800026a:	bf00      	nop
 800026c:	3710      	adds	r7, #16
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40003800 	.word	0x40003800

08000278 <main>:
int main()
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
	/* Init GPIO pins to SPI2 pins */
	SPI_GPIOInit();
 800027e:	f7ff ffab 	bl	80001d8 <SPI_GPIOInit>

	/* Init SPI2 peripheral parameters */
	SPI2_Init();
 8000282:	f7ff ffdb 	bl	800023c <SPI2_Init>

	SPI_SSIConfig(SPI2, ENABLE); // Since we are using SSM, we need to enable SSI bit to avoid MODF error
 8000286:	2101      	movs	r1, #1
 8000288:	4807      	ldr	r0, [pc, #28]	@ (80002a8 <main+0x30>)
 800028a:	f000 fba0 	bl	80009ce <SPI_SSIConfig>
	
	/* Send data */
	char user_data[] = "Hello World";
 800028e:	4a07      	ldr	r2, [pc, #28]	@ (80002ac <main+0x34>)
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	ca07      	ldmia	r2, {r0, r1, r2}
 8000294:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	SPI_SendData(SPI2, (uint8_t*)user_data, sizeof(user_data));
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	220c      	movs	r2, #12
 800029c:	4619      	mov	r1, r3
 800029e:	4802      	ldr	r0, [pc, #8]	@ (80002a8 <main+0x30>)
 80002a0:	f000 fb59 	bl	8000956 <SPI_SendData>
	
	while(1);
 80002a4:	bf00      	nop
 80002a6:	e7fd      	b.n	80002a4 <main+0x2c>
 80002a8:	40003800 	.word	0x40003800
 80002ac:	08000a64 	.word	0x08000a64

080002b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b0:	480d      	ldr	r0, [pc, #52]	@ (80002e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b8:	480c      	ldr	r0, [pc, #48]	@ (80002ec <LoopForever+0x6>)
  ldr r1, =_edata
 80002ba:	490d      	ldr	r1, [pc, #52]	@ (80002f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002bc:	4a0d      	ldr	r2, [pc, #52]	@ (80002f4 <LoopForever+0xe>)
  movs r3, #0
 80002be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c0:	e002      	b.n	80002c8 <LoopCopyDataInit>

080002c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c6:	3304      	adds	r3, #4

080002c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002cc:	d3f9      	bcc.n	80002c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ce:	4a0a      	ldr	r2, [pc, #40]	@ (80002f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d0:	4c0a      	ldr	r4, [pc, #40]	@ (80002fc <LoopForever+0x16>)
  movs r3, #0
 80002d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d4:	e001      	b.n	80002da <LoopFillZerobss>

080002d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d8:	3204      	adds	r2, #4

080002da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002dc:	d3fb      	bcc.n	80002d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002de:	f000 fb91 	bl	8000a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002e2:	f7ff ffc9 	bl	8000278 <main>

080002e6 <LoopForever>:

LoopForever:
  b LoopForever
 80002e6:	e7fe      	b.n	80002e6 <LoopForever>
  ldr   r0, =_estack
 80002e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f4:	08000a78 	.word	0x08000a78
  ldr r2, =_sbss
 80002f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002fc:	2000001c 	.word	0x2000001c

08000300 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000300:	e7fe      	b.n	8000300 <ADC_IRQHandler>
	...

08000304 <GPIO_Init>:
 * @param[in] pGPIOx        
 * 
 * @return                  void.
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b088      	sub	sp, #32
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
    /* Configure mode */

    /* Enable the peripheral clock */
    GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2101      	movs	r1, #1
 8000312:	4618      	mov	r0, r3
 8000314:	f000 f97c 	bl	8000610 <GPIO_PeriClockControl>

    /* Bit position of pin number gpio reg */
    uint32_t BitPosition = 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	791b      	ldrb	r3, [r3, #4]
 800031c:	005b      	lsls	r3, r3, #1
 800031e:	61fb      	str	r3, [r7, #28]
    if (GPIO_MODE_IT_FT > pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	795b      	ldrb	r3, [r3, #5]
 8000324:	2b03      	cmp	r3, #3
 8000326:	d81b      	bhi.n	8000360 <GPIO_Init+0x5c>
    {
        /* Firstly clear */
        pGPIOHandle->pGPIOx->MODER &= ~(0x3 << BitPosition);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	2103      	movs	r1, #3
 8000330:	69fb      	ldr	r3, [r7, #28]
 8000332:	fa01 f303 	lsl.w	r3, r1, r3
 8000336:	43db      	mvns	r3, r3
 8000338:	4619      	mov	r1, r3
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	400a      	ands	r2, r1
 8000340:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->MODER |= pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << BitPosition;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	795b      	ldrb	r3, [r3, #5]
 800034c:	4619      	mov	r1, r3
 800034e:	69fb      	ldr	r3, [r7, #28]
 8000350:	fa01 f303 	lsl.w	r3, r1, r3
 8000354:	4619      	mov	r1, r3
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	430a      	orrs	r2, r1
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	e0b8      	b.n	80004d2 <GPIO_Init+0x1ce>
    }
    else 
    {
        /* interrupt mode */
        /* Rising trigger */
        if (GPIO_MODE_IT_RT == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	795b      	ldrb	r3, [r3, #5]
 8000364:	2b05      	cmp	r3, #5
 8000366:	d117      	bne.n	8000398 <GPIO_Init+0x94>
        {
            /* Configure enable EXTI_RTSR Register */
            EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000368:	4ba0      	ldr	r3, [pc, #640]	@ (80005ec <GPIO_Init+0x2e8>)
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	687a      	ldr	r2, [r7, #4]
 800036e:	7912      	ldrb	r2, [r2, #4]
 8000370:	4611      	mov	r1, r2
 8000372:	2201      	movs	r2, #1
 8000374:	408a      	lsls	r2, r1
 8000376:	4611      	mov	r1, r2
 8000378:	4a9c      	ldr	r2, [pc, #624]	@ (80005ec <GPIO_Init+0x2e8>)
 800037a:	430b      	orrs	r3, r1
 800037c:	6093      	str	r3, [r2, #8]
            /* Disable EXTI_FTSR */
            EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800037e:	4b9b      	ldr	r3, [pc, #620]	@ (80005ec <GPIO_Init+0x2e8>)
 8000380:	68db      	ldr	r3, [r3, #12]
 8000382:	687a      	ldr	r2, [r7, #4]
 8000384:	7912      	ldrb	r2, [r2, #4]
 8000386:	4611      	mov	r1, r2
 8000388:	2201      	movs	r2, #1
 800038a:	408a      	lsls	r2, r1
 800038c:	43d2      	mvns	r2, r2
 800038e:	4611      	mov	r1, r2
 8000390:	4a96      	ldr	r2, [pc, #600]	@ (80005ec <GPIO_Init+0x2e8>)
 8000392:	400b      	ands	r3, r1
 8000394:	60d3      	str	r3, [r2, #12]
 8000396:	e035      	b.n	8000404 <GPIO_Init+0x100>
        }
        else if (GPIO_MODE_IT_FT == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	795b      	ldrb	r3, [r3, #5]
 800039c:	2b04      	cmp	r3, #4
 800039e:	d117      	bne.n	80003d0 <GPIO_Init+0xcc>
        {
            /* Configure enable EXTI_FTSR Register*/
            EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003a0:	4b92      	ldr	r3, [pc, #584]	@ (80005ec <GPIO_Init+0x2e8>)
 80003a2:	68db      	ldr	r3, [r3, #12]
 80003a4:	687a      	ldr	r2, [r7, #4]
 80003a6:	7912      	ldrb	r2, [r2, #4]
 80003a8:	4611      	mov	r1, r2
 80003aa:	2201      	movs	r2, #1
 80003ac:	408a      	lsls	r2, r1
 80003ae:	4611      	mov	r1, r2
 80003b0:	4a8e      	ldr	r2, [pc, #568]	@ (80005ec <GPIO_Init+0x2e8>)
 80003b2:	430b      	orrs	r3, r1
 80003b4:	60d3      	str	r3, [r2, #12]
            /* Disable EXTI_RTSR */
            EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003b6:	4b8d      	ldr	r3, [pc, #564]	@ (80005ec <GPIO_Init+0x2e8>)
 80003b8:	689b      	ldr	r3, [r3, #8]
 80003ba:	687a      	ldr	r2, [r7, #4]
 80003bc:	7912      	ldrb	r2, [r2, #4]
 80003be:	4611      	mov	r1, r2
 80003c0:	2201      	movs	r2, #1
 80003c2:	408a      	lsls	r2, r1
 80003c4:	43d2      	mvns	r2, r2
 80003c6:	4611      	mov	r1, r2
 80003c8:	4a88      	ldr	r2, [pc, #544]	@ (80005ec <GPIO_Init+0x2e8>)
 80003ca:	400b      	ands	r3, r1
 80003cc:	6093      	str	r3, [r2, #8]
 80003ce:	e019      	b.n	8000404 <GPIO_Init+0x100>
        }
        else if (GPIO_MODE_IT_RFT == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	795b      	ldrb	r3, [r3, #5]
 80003d4:	2b06      	cmp	r3, #6
 80003d6:	d115      	bne.n	8000404 <GPIO_Init+0x100>
        {
            /* Configure enable EXT_RTSR and EXTI_RTSR Register */
            EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003d8:	4b84      	ldr	r3, [pc, #528]	@ (80005ec <GPIO_Init+0x2e8>)
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	7912      	ldrb	r2, [r2, #4]
 80003e0:	4611      	mov	r1, r2
 80003e2:	2201      	movs	r2, #1
 80003e4:	408a      	lsls	r2, r1
 80003e6:	4611      	mov	r1, r2
 80003e8:	4a80      	ldr	r2, [pc, #512]	@ (80005ec <GPIO_Init+0x2e8>)
 80003ea:	430b      	orrs	r3, r1
 80003ec:	6093      	str	r3, [r2, #8]
            EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003ee:	4b7f      	ldr	r3, [pc, #508]	@ (80005ec <GPIO_Init+0x2e8>)
 80003f0:	68db      	ldr	r3, [r3, #12]
 80003f2:	687a      	ldr	r2, [r7, #4]
 80003f4:	7912      	ldrb	r2, [r2, #4]
 80003f6:	4611      	mov	r1, r2
 80003f8:	2201      	movs	r2, #1
 80003fa:	408a      	lsls	r2, r1
 80003fc:	4611      	mov	r1, r2
 80003fe:	4a7b      	ldr	r2, [pc, #492]	@ (80005ec <GPIO_Init+0x2e8>)
 8000400:	430b      	orrs	r3, r1
 8000402:	60d3      	str	r3, [r2, #12]
        }

        /* Configure SYSCFG_EXTICR1->4 to set EXTI line */
        SYSCFG_PCLK_EN();
 8000404:	4b7a      	ldr	r3, [pc, #488]	@ (80005f0 <GPIO_Init+0x2ec>)
 8000406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000408:	4a79      	ldr	r2, [pc, #484]	@ (80005f0 <GPIO_Init+0x2ec>)
 800040a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800040e:	6453      	str	r3, [r2, #68]	@ 0x44
        /* Choose EXTICR1-4 */
        uint32_t EXTICRx = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	791b      	ldrb	r3, [r3, #4]
 8000414:	089b      	lsrs	r3, r3, #2
 8000416:	b2db      	uxtb	r3, r3
 8000418:	61bb      	str	r3, [r7, #24]
        /* Choose bit position */
        uint32_t EXTICRxBitPosition = 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4);
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	791b      	ldrb	r3, [r3, #4]
 800041e:	f003 0303 	and.w	r3, r3, #3
 8000422:	009b      	lsls	r3, r3, #2
 8000424:	617b      	str	r3, [r7, #20]
        /* Configure EXTICR port code*/
        uint32_t EXTICRxPortCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a72      	ldr	r2, [pc, #456]	@ (80005f4 <GPIO_Init+0x2f0>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d024      	beq.n	800047a <GPIO_Init+0x176>
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a70      	ldr	r2, [pc, #448]	@ (80005f8 <GPIO_Init+0x2f4>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d01d      	beq.n	8000476 <GPIO_Init+0x172>
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a6f      	ldr	r2, [pc, #444]	@ (80005fc <GPIO_Init+0x2f8>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d016      	beq.n	8000472 <GPIO_Init+0x16e>
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a6d      	ldr	r2, [pc, #436]	@ (8000600 <GPIO_Init+0x2fc>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d00f      	beq.n	800046e <GPIO_Init+0x16a>
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a6c      	ldr	r2, [pc, #432]	@ (8000604 <GPIO_Init+0x300>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d008      	beq.n	800046a <GPIO_Init+0x166>
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a6a      	ldr	r2, [pc, #424]	@ (8000608 <GPIO_Init+0x304>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d101      	bne.n	8000466 <GPIO_Init+0x162>
 8000462:	2307      	movs	r3, #7
 8000464:	e00a      	b.n	800047c <GPIO_Init+0x178>
 8000466:	2300      	movs	r3, #0
 8000468:	e008      	b.n	800047c <GPIO_Init+0x178>
 800046a:	2304      	movs	r3, #4
 800046c:	e006      	b.n	800047c <GPIO_Init+0x178>
 800046e:	2303      	movs	r3, #3
 8000470:	e004      	b.n	800047c <GPIO_Init+0x178>
 8000472:	2302      	movs	r3, #2
 8000474:	e002      	b.n	800047c <GPIO_Init+0x178>
 8000476:	2301      	movs	r3, #1
 8000478:	e000      	b.n	800047c <GPIO_Init+0x178>
 800047a:	2300      	movs	r3, #0
 800047c:	613b      	str	r3, [r7, #16]
        /* Firstly clear */
        SYSCFG->EXTICR[EXTICRx] &= ~(0xF << EXTICRxBitPosition);
 800047e:	4a63      	ldr	r2, [pc, #396]	@ (800060c <GPIO_Init+0x308>)
 8000480:	69bb      	ldr	r3, [r7, #24]
 8000482:	3302      	adds	r3, #2
 8000484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000488:	210f      	movs	r1, #15
 800048a:	697a      	ldr	r2, [r7, #20]
 800048c:	fa01 f202 	lsl.w	r2, r1, r2
 8000490:	43d2      	mvns	r2, r2
 8000492:	495e      	ldr	r1, [pc, #376]	@ (800060c <GPIO_Init+0x308>)
 8000494:	401a      	ands	r2, r3
 8000496:	69bb      	ldr	r3, [r7, #24]
 8000498:	3302      	adds	r3, #2
 800049a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        SYSCFG->EXTICR[EXTICRx] |= EXTICRxPortCode << EXTICRxBitPosition;
 800049e:	4a5b      	ldr	r2, [pc, #364]	@ (800060c <GPIO_Init+0x308>)
 80004a0:	69bb      	ldr	r3, [r7, #24]
 80004a2:	3302      	adds	r3, #2
 80004a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004a8:	6939      	ldr	r1, [r7, #16]
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	fa01 f303 	lsl.w	r3, r1, r3
 80004b0:	4956      	ldr	r1, [pc, #344]	@ (800060c <GPIO_Init+0x308>)
 80004b2:	431a      	orrs	r2, r3
 80004b4:	69bb      	ldr	r3, [r7, #24]
 80004b6:	3302      	adds	r3, #2
 80004b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Enable delevery interrupt from peri -> cpu: IMR -> line is not masked -> allow to delivery to NVIC */
        EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004bc:	4b4b      	ldr	r3, [pc, #300]	@ (80005ec <GPIO_Init+0x2e8>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	687a      	ldr	r2, [r7, #4]
 80004c2:	7912      	ldrb	r2, [r2, #4]
 80004c4:	4611      	mov	r1, r2
 80004c6:	2201      	movs	r2, #1
 80004c8:	408a      	lsls	r2, r1
 80004ca:	4611      	mov	r1, r2
 80004cc:	4a47      	ldr	r2, [pc, #284]	@ (80005ec <GPIO_Init+0x2e8>)
 80004ce:	430b      	orrs	r3, r1
 80004d0:	6013      	str	r3, [r2, #0]
    }

    /* Configure speed */
    /* Firstly clear */
    pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << BitPosition);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	689a      	ldr	r2, [r3, #8]
 80004d8:	2103      	movs	r1, #3
 80004da:	69fb      	ldr	r3, [r7, #28]
 80004dc:	fa01 f303 	lsl.w	r3, r1, r3
 80004e0:	43db      	mvns	r3, r3
 80004e2:	4619      	mov	r1, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	400a      	ands	r2, r1
 80004ea:	609a      	str	r2, [r3, #8]
    pGPIOHandle->pGPIOx->OSPEEDR |= pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << BitPosition;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	689a      	ldr	r2, [r3, #8]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	799b      	ldrb	r3, [r3, #6]
 80004f6:	4619      	mov	r1, r3
 80004f8:	69fb      	ldr	r3, [r7, #28]
 80004fa:	fa01 f303 	lsl.w	r3, r1, r3
 80004fe:	4619      	mov	r1, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	430a      	orrs	r2, r1
 8000506:	609a      	str	r2, [r3, #8]


    /* Configure pull up pull down */
    /* Firstly clear */
    pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << BitPosition);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	68da      	ldr	r2, [r3, #12]
 800050e:	2103      	movs	r1, #3
 8000510:	69fb      	ldr	r3, [r7, #28]
 8000512:	fa01 f303 	lsl.w	r3, r1, r3
 8000516:	43db      	mvns	r3, r3
 8000518:	4619      	mov	r1, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	400a      	ands	r2, r1
 8000520:	60da      	str	r2, [r3, #12]
    pGPIOHandle->pGPIOx->PUPDR |= pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << BitPosition;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	68da      	ldr	r2, [r3, #12]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	79db      	ldrb	r3, [r3, #7]
 800052c:	4619      	mov	r1, r3
 800052e:	69fb      	ldr	r3, [r7, #28]
 8000530:	fa01 f303 	lsl.w	r3, r1, r3
 8000534:	4619      	mov	r1, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	430a      	orrs	r2, r1
 800053c:	60da      	str	r2, [r3, #12]
    
    /* Configure output type*/
    /* Firstly clear */
    pGPIOHandle->pGPIOx->OTYPER &= ~(0x3 << (BitPosition/2));
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	685a      	ldr	r2, [r3, #4]
 8000544:	69fb      	ldr	r3, [r7, #28]
 8000546:	085b      	lsrs	r3, r3, #1
 8000548:	2103      	movs	r1, #3
 800054a:	fa01 f303 	lsl.w	r3, r1, r3
 800054e:	43db      	mvns	r3, r3
 8000550:	4619      	mov	r1, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	400a      	ands	r2, r1
 8000558:	605a      	str	r2, [r3, #4]
    pGPIOHandle->pGPIOx->OTYPER |= pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (BitPosition / 2);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	685a      	ldr	r2, [r3, #4]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	7a1b      	ldrb	r3, [r3, #8]
 8000564:	4619      	mov	r1, r3
 8000566:	69fb      	ldr	r3, [r7, #28]
 8000568:	085b      	lsrs	r3, r3, #1
 800056a:	fa01 f303 	lsl.w	r3, r1, r3
 800056e:	4619      	mov	r1, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	430a      	orrs	r2, r1
 8000576:	605a      	str	r2, [r3, #4]

    /* Configure alt func */
    if (GPIO_MODE_ALTFN == pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	795b      	ldrb	r3, [r3, #5]
 800057c:	2b02      	cmp	r3, #2
 800057e:	d131      	bne.n	80005e4 <GPIO_Init+0x2e0>
    {
        /* Choose low or high */
        uint32_t AltFuncIndex = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	791b      	ldrb	r3, [r3, #4]
 8000584:	08db      	lsrs	r3, r3, #3
 8000586:	b2db      	uxtb	r3, r3
 8000588:	60fb      	str	r3, [r7, #12]
        /* Choose bit position */
        uint32_t AltFuncBitPosition = 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	791b      	ldrb	r3, [r3, #4]
 800058e:	f003 0307 	and.w	r3, r3, #7
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	60bb      	str	r3, [r7, #8]
        /* Configure alt func reg */
        /* Firstly clear */
        pGPIOHandle->pGPIOx->AFR[AltFuncIndex] &= ~(0xFF << AltFuncBitPosition);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	3208      	adds	r2, #8
 800059e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005a2:	21ff      	movs	r1, #255	@ 0xff
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	fa01 f303 	lsl.w	r3, r1, r3
 80005aa:	43db      	mvns	r3, r3
 80005ac:	4619      	mov	r1, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4011      	ands	r1, r2
 80005b4:	68fa      	ldr	r2, [r7, #12]
 80005b6:	3208      	adds	r2, #8
 80005b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        pGPIOHandle->pGPIOx->AFR[AltFuncIndex] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << AltFuncBitPosition;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	68fa      	ldr	r2, [r7, #12]
 80005c2:	3208      	adds	r2, #8
 80005c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	7a5b      	ldrb	r3, [r3, #9]
 80005cc:	4619      	mov	r1, r3
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	fa01 f303 	lsl.w	r3, r1, r3
 80005d4:	4619      	mov	r1, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4311      	orrs	r1, r2
 80005dc:	68fa      	ldr	r2, [r7, #12]
 80005de:	3208      	adds	r2, #8
 80005e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
 80005e4:	bf00      	nop
 80005e6:	3720      	adds	r7, #32
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40013c00 	.word	0x40013c00
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40020000 	.word	0x40020000
 80005f8:	40020400 	.word	0x40020400
 80005fc:	40020800 	.word	0x40020800
 8000600:	40020c00 	.word	0x40020c00
 8000604:	40021000 	.word	0x40021000
 8000608:	40021c00 	.word	0x40021c00
 800060c:	40013800 	.word	0x40013800

08000610 <GPIO_PeriClockControl>:
 * 
 * @return                  void.
 * 
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	460b      	mov	r3, r1
 800061a:	70fb      	strb	r3, [r7, #3]
    if (ENABLE == EnorDi)
 800061c:	78fb      	ldrb	r3, [r7, #3]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d141      	bne.n	80006a6 <GPIO_PeriClockControl+0x96>
    {
        if (GPIOA == pGPIOx)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a43      	ldr	r2, [pc, #268]	@ (8000734 <GPIO_PeriClockControl+0x124>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d106      	bne.n	8000638 <GPIO_PeriClockControl+0x28>
        {
            GPIOA_PCLK_EN();
 800062a:	4b43      	ldr	r3, [pc, #268]	@ (8000738 <GPIO_PeriClockControl+0x128>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a42      	ldr	r2, [pc, #264]	@ (8000738 <GPIO_PeriClockControl+0x128>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
        else if (GPIOH == pGPIOx)
        {
            GPIOH_PCLK_DI();
        } 
    }
}
 8000636:	e077      	b.n	8000728 <GPIO_PeriClockControl+0x118>
        else if (GPIOB == pGPIOx)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4a40      	ldr	r2, [pc, #256]	@ (800073c <GPIO_PeriClockControl+0x12c>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d106      	bne.n	800064e <GPIO_PeriClockControl+0x3e>
            GPIOB_PCLK_EN();
 8000640:	4b3d      	ldr	r3, [pc, #244]	@ (8000738 <GPIO_PeriClockControl+0x128>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000644:	4a3c      	ldr	r2, [pc, #240]	@ (8000738 <GPIO_PeriClockControl+0x128>)
 8000646:	f043 0302 	orr.w	r3, r3, #2
 800064a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800064c:	e06c      	b.n	8000728 <GPIO_PeriClockControl+0x118>
        else if (GPIOC == pGPIOx)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4a3b      	ldr	r2, [pc, #236]	@ (8000740 <GPIO_PeriClockControl+0x130>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d106      	bne.n	8000664 <GPIO_PeriClockControl+0x54>
            GPIOC_PCLK_EN();
 8000656:	4b38      	ldr	r3, [pc, #224]	@ (8000738 <GPIO_PeriClockControl+0x128>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a37      	ldr	r2, [pc, #220]	@ (8000738 <GPIO_PeriClockControl+0x128>)
 800065c:	f043 0304 	orr.w	r3, r3, #4
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000662:	e061      	b.n	8000728 <GPIO_PeriClockControl+0x118>
        else if (GPIOD == pGPIOx)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a37      	ldr	r2, [pc, #220]	@ (8000744 <GPIO_PeriClockControl+0x134>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d106      	bne.n	800067a <GPIO_PeriClockControl+0x6a>
            GPIOD_PCLK_EN();
 800066c:	4b32      	ldr	r3, [pc, #200]	@ (8000738 <GPIO_PeriClockControl+0x128>)
 800066e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000670:	4a31      	ldr	r2, [pc, #196]	@ (8000738 <GPIO_PeriClockControl+0x128>)
 8000672:	f043 0308 	orr.w	r3, r3, #8
 8000676:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000678:	e056      	b.n	8000728 <GPIO_PeriClockControl+0x118>
        else if (GPIOE == pGPIOx)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4a32      	ldr	r2, [pc, #200]	@ (8000748 <GPIO_PeriClockControl+0x138>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d106      	bne.n	8000690 <GPIO_PeriClockControl+0x80>
            GPIOE_PCLK_EN();
 8000682:	4b2d      	ldr	r3, [pc, #180]	@ (8000738 <GPIO_PeriClockControl+0x128>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	4a2c      	ldr	r2, [pc, #176]	@ (8000738 <GPIO_PeriClockControl+0x128>)
 8000688:	f043 0310 	orr.w	r3, r3, #16
 800068c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800068e:	e04b      	b.n	8000728 <GPIO_PeriClockControl+0x118>
        else if (GPIOH == pGPIOx)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4a2e      	ldr	r2, [pc, #184]	@ (800074c <GPIO_PeriClockControl+0x13c>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d147      	bne.n	8000728 <GPIO_PeriClockControl+0x118>
            GPIOH_PCLK_EN();
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <GPIO_PeriClockControl+0x128>)
 800069a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069c:	4a26      	ldr	r2, [pc, #152]	@ (8000738 <GPIO_PeriClockControl+0x128>)
 800069e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006a2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006a4:	e040      	b.n	8000728 <GPIO_PeriClockControl+0x118>
        if (GPIOA == pGPIOx)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4a22      	ldr	r2, [pc, #136]	@ (8000734 <GPIO_PeriClockControl+0x124>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d106      	bne.n	80006bc <GPIO_PeriClockControl+0xac>
            GPIOA_PCLK_DI();
 80006ae:	4b22      	ldr	r3, [pc, #136]	@ (8000738 <GPIO_PeriClockControl+0x128>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4a21      	ldr	r2, [pc, #132]	@ (8000738 <GPIO_PeriClockControl+0x128>)
 80006b4:	f023 0301 	bic.w	r3, r3, #1
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006ba:	e035      	b.n	8000728 <GPIO_PeriClockControl+0x118>
        else if (GPIOB == pGPIOx)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a1f      	ldr	r2, [pc, #124]	@ (800073c <GPIO_PeriClockControl+0x12c>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d106      	bne.n	80006d2 <GPIO_PeriClockControl+0xc2>
            GPIOB_PCLK_DI();
 80006c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000738 <GPIO_PeriClockControl+0x128>)
 80006c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000738 <GPIO_PeriClockControl+0x128>)
 80006ca:	f023 0302 	bic.w	r3, r3, #2
 80006ce:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006d0:	e02a      	b.n	8000728 <GPIO_PeriClockControl+0x118>
        else if (GPIOC == pGPIOx)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4a1a      	ldr	r2, [pc, #104]	@ (8000740 <GPIO_PeriClockControl+0x130>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d106      	bne.n	80006e8 <GPIO_PeriClockControl+0xd8>
            GPIOC_PCLK_DI();
 80006da:	4b17      	ldr	r3, [pc, #92]	@ (8000738 <GPIO_PeriClockControl+0x128>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a16      	ldr	r2, [pc, #88]	@ (8000738 <GPIO_PeriClockControl+0x128>)
 80006e0:	f023 0304 	bic.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006e6:	e01f      	b.n	8000728 <GPIO_PeriClockControl+0x118>
        else if (GPIOD == pGPIOx)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4a16      	ldr	r2, [pc, #88]	@ (8000744 <GPIO_PeriClockControl+0x134>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d106      	bne.n	80006fe <GPIO_PeriClockControl+0xee>
            GPIOD_PCLK_DI();
 80006f0:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <GPIO_PeriClockControl+0x128>)
 80006f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f4:	4a10      	ldr	r2, [pc, #64]	@ (8000738 <GPIO_PeriClockControl+0x128>)
 80006f6:	f023 0308 	bic.w	r3, r3, #8
 80006fa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006fc:	e014      	b.n	8000728 <GPIO_PeriClockControl+0x118>
        else if (GPIOE == pGPIOx)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4a11      	ldr	r2, [pc, #68]	@ (8000748 <GPIO_PeriClockControl+0x138>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d106      	bne.n	8000714 <GPIO_PeriClockControl+0x104>
            GPIOE_PCLK_DI();
 8000706:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <GPIO_PeriClockControl+0x128>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	4a0b      	ldr	r2, [pc, #44]	@ (8000738 <GPIO_PeriClockControl+0x128>)
 800070c:	f023 0310 	bic.w	r3, r3, #16
 8000710:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000712:	e009      	b.n	8000728 <GPIO_PeriClockControl+0x118>
        else if (GPIOH == pGPIOx)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a0d      	ldr	r2, [pc, #52]	@ (800074c <GPIO_PeriClockControl+0x13c>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d105      	bne.n	8000728 <GPIO_PeriClockControl+0x118>
            GPIOH_PCLK_DI();
 800071c:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <GPIO_PeriClockControl+0x128>)
 800071e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000720:	4a05      	ldr	r2, [pc, #20]	@ (8000738 <GPIO_PeriClockControl+0x128>)
 8000722:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000726:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40020000 	.word	0x40020000
 8000738:	40023800 	.word	0x40023800
 800073c:	40020400 	.word	0x40020400
 8000740:	40020800 	.word	0x40020800
 8000744:	40020c00 	.word	0x40020c00
 8000748:	40021000 	.word	0x40021000
 800074c:	40021c00 	.word	0x40021c00

08000750 <SPI_PeriClockControl>:
 * @return            - none
 *
 * @Note              - none
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	460b      	mov	r3, r1
 800075a:	70fb      	strb	r3, [r7, #3]
    if (ENABLE == EnorDi)
 800075c:	78fb      	ldrb	r3, [r7, #3]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d12b      	bne.n	80007ba <SPI_PeriClockControl+0x6a>
    {
        if (pSPIx == SPI1)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4a2d      	ldr	r2, [pc, #180]	@ (800081c <SPI_PeriClockControl+0xcc>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d106      	bne.n	8000778 <SPI_PeriClockControl+0x28>
        {
            SPI1_PCLK_EN();
 800076a:	4b2d      	ldr	r3, [pc, #180]	@ (8000820 <SPI_PeriClockControl+0xd0>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076e:	4a2c      	ldr	r2, [pc, #176]	@ (8000820 <SPI_PeriClockControl+0xd0>)
 8000770:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000774:	6453      	str	r3, [r2, #68]	@ 0x44
        else if (pSPIx == SPI4)
        {
            SPI4_PCLK_DI();
        }
    }
}
 8000776:	e04b      	b.n	8000810 <SPI_PeriClockControl+0xc0>
        else if (pSPIx == SPI2)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a2a      	ldr	r2, [pc, #168]	@ (8000824 <SPI_PeriClockControl+0xd4>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d106      	bne.n	800078e <SPI_PeriClockControl+0x3e>
            SPI2_PCLK_EN();
 8000780:	4b27      	ldr	r3, [pc, #156]	@ (8000820 <SPI_PeriClockControl+0xd0>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000784:	4a26      	ldr	r2, [pc, #152]	@ (8000820 <SPI_PeriClockControl+0xd0>)
 8000786:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800078a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800078c:	e040      	b.n	8000810 <SPI_PeriClockControl+0xc0>
        else if (pSPIx == SPI3)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4a25      	ldr	r2, [pc, #148]	@ (8000828 <SPI_PeriClockControl+0xd8>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d106      	bne.n	80007a4 <SPI_PeriClockControl+0x54>
            SPI3_PCLK_EN();
 8000796:	4b22      	ldr	r3, [pc, #136]	@ (8000820 <SPI_PeriClockControl+0xd0>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079a:	4a21      	ldr	r2, [pc, #132]	@ (8000820 <SPI_PeriClockControl+0xd0>)
 800079c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007a0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007a2:	e035      	b.n	8000810 <SPI_PeriClockControl+0xc0>
        else if (pSPIx == SPI4)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a21      	ldr	r2, [pc, #132]	@ (800082c <SPI_PeriClockControl+0xdc>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d131      	bne.n	8000810 <SPI_PeriClockControl+0xc0>
            SPI4_PCLK_EN();
 80007ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000820 <SPI_PeriClockControl+0xd0>)
 80007ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000820 <SPI_PeriClockControl+0xd0>)
 80007b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007b6:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80007b8:	e02a      	b.n	8000810 <SPI_PeriClockControl+0xc0>
        if (pSPIx == SPI1)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a17      	ldr	r2, [pc, #92]	@ (800081c <SPI_PeriClockControl+0xcc>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d106      	bne.n	80007d0 <SPI_PeriClockControl+0x80>
            SPI1_PCLK_DI();
 80007c2:	4b17      	ldr	r3, [pc, #92]	@ (8000820 <SPI_PeriClockControl+0xd0>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c6:	4a16      	ldr	r2, [pc, #88]	@ (8000820 <SPI_PeriClockControl+0xd0>)
 80007c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007cc:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80007ce:	e01f      	b.n	8000810 <SPI_PeriClockControl+0xc0>
        else if (pSPIx == SPI2)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4a14      	ldr	r2, [pc, #80]	@ (8000824 <SPI_PeriClockControl+0xd4>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d106      	bne.n	80007e6 <SPI_PeriClockControl+0x96>
            SPI2_PCLK_DI();
 80007d8:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <SPI_PeriClockControl+0xd0>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007dc:	4a10      	ldr	r2, [pc, #64]	@ (8000820 <SPI_PeriClockControl+0xd0>)
 80007de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80007e2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007e4:	e014      	b.n	8000810 <SPI_PeriClockControl+0xc0>
        else if (pSPIx == SPI3)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a0f      	ldr	r2, [pc, #60]	@ (8000828 <SPI_PeriClockControl+0xd8>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d106      	bne.n	80007fc <SPI_PeriClockControl+0xac>
            SPI3_PCLK_DI();
 80007ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <SPI_PeriClockControl+0xd0>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f2:	4a0b      	ldr	r2, [pc, #44]	@ (8000820 <SPI_PeriClockControl+0xd0>)
 80007f4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80007f8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007fa:	e009      	b.n	8000810 <SPI_PeriClockControl+0xc0>
        else if (pSPIx == SPI4)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4a0b      	ldr	r2, [pc, #44]	@ (800082c <SPI_PeriClockControl+0xdc>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d105      	bne.n	8000810 <SPI_PeriClockControl+0xc0>
            SPI4_PCLK_DI();
 8000804:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <SPI_PeriClockControl+0xd0>)
 8000806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000808:	4a05      	ldr	r2, [pc, #20]	@ (8000820 <SPI_PeriClockControl+0xd0>)
 800080a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800080e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40013000 	.word	0x40013000
 8000820:	40023800 	.word	0x40023800
 8000824:	40003800 	.word	0x40003800
 8000828:	40003c00 	.word	0x40003c00
 800082c:	40013400 	.word	0x40013400

08000830 <SPI_Init>:
 * @return            - none
 *
 * @Note              - none
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
    /* Enable the SPI peripheral clock */
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2101      	movs	r1, #1
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff86 	bl	8000750 <SPI_PeriClockControl>

    /* 1. Configure device mode */
    pSPIHandle->pSPIx->CR1 |=   pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	6819      	ldr	r1, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	791b      	ldrb	r3, [r3, #4]
 800084e:	009a      	lsls	r2, r3, #2
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	430a      	orrs	r2, r1
 8000856:	601a      	str	r2, [r3, #0]

    /* 2. Configure bus config */
    if (SPI_BUS_CONFIG_FD == pSPIHandle->SPIConfig.SPI_BusConfig)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	795b      	ldrb	r3, [r3, #5]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d108      	bne.n	8000872 <SPI_Init+0x42>
    {
        /* BIDI mode should be cleared */
        pSPIHandle->pSPIx->CR1 &= ~(1 << SPI_CR1_BIDIMODE);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	e020      	b.n	80008b4 <SPI_Init+0x84>
    }
    else if (SPI_BUS_CONFIG_HD == pSPIHandle->SPIConfig.SPI_BusConfig)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	795b      	ldrb	r3, [r3, #5]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d108      	bne.n	800088c <SPI_Init+0x5c>
    {
        /* BIDI mode should be set */
        pSPIHandle->pSPIx->CR1 |= (1 << SPI_CR1_BIDIMODE);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	e013      	b.n	80008b4 <SPI_Init+0x84>
    }
    else if (SPI_BUS_CONFIG_SIMPLEX_RXONLY == pSPIHandle->SPIConfig.SPI_BusConfig)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	795b      	ldrb	r3, [r3, #5]
 8000890:	2b03      	cmp	r3, #3
 8000892:	d10f      	bne.n	80008b4 <SPI_Init+0x84>
    {
        /* BIDI mode should be cleared */
        pSPIHandle->pSPIx->CR1 &= ~(1 << SPI_CR1_BIDIMODE);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80008a2:	601a      	str	r2, [r3, #0]
        /* RXONLY bit must be set */
        pSPIHandle->pSPIx->CR1 |= (1 << SPI_CR1_RXONLY);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80008b2:	601a      	str	r2, [r3, #0]
    }

    /* 3. Configure SCLK speed (baud rate) */
    pSPIHandle->pSPIx->CR1 |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	6819      	ldr	r1, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	799b      	ldrb	r3, [r3, #6]
 80008be:	00da      	lsls	r2, r3, #3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	430a      	orrs	r2, r1
 80008c6:	601a      	str	r2, [r3, #0]

    /* 4. Configure DFF */
    pSPIHandle->pSPIx->CR1 |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	6819      	ldr	r1, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	79db      	ldrb	r3, [r3, #7]
 80008d2:	02da      	lsls	r2, r3, #11
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	430a      	orrs	r2, r1
 80008da:	601a      	str	r2, [r3, #0]

    /* 5. Configure CPOL */
    pSPIHandle->pSPIx->CR1 |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	6819      	ldr	r1, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	7a1b      	ldrb	r3, [r3, #8]
 80008e6:	005a      	lsls	r2, r3, #1
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	430a      	orrs	r2, r1
 80008ee:	601a      	str	r2, [r3, #0]

    /* 6. Configure CPHA */
    pSPIHandle->pSPIx->CR1 |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	7a5b      	ldrb	r3, [r3, #9]
 80008fa:	4619      	mov	r1, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	430a      	orrs	r2, r1
 8000902:	601a      	str	r2, [r3, #0]

    /* 7. Configure SSM */
    pSPIHandle->pSPIx->CR1 |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	6819      	ldr	r1, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	7a9b      	ldrb	r3, [r3, #10]
 800090e:	025a      	lsls	r2, r3, #9
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	430a      	orrs	r2, r1
 8000916:	601a      	str	r2, [r3, #0]

    /* 8. Enable the SPI peripheral */
    pSPIHandle->pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000926:	601a      	str	r2, [r3, #0]
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <SPI_GetFlagStatus>:
 * @return            - FLAG_SET or FLAG_RESET macros
 *
 * @Note              - none
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
    if (pSPIx->SR & FlagName)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	689a      	ldr	r2, [r3, #8]
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	4013      	ands	r3, r2
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SPI_GetFlagStatus+0x1a>
    {
        return FLAG_SET;
 8000946:	2301      	movs	r3, #1
 8000948:	e000      	b.n	800094c <SPI_GetFlagStatus+0x1c>
    }
    return FLAG_RESET;
 800094a:	2300      	movs	r3, #0
}
 800094c:	4618      	mov	r0, r3
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr

08000956 <SPI_SendData>:
 * @return            - none
 *
 * @Note              - none
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b084      	sub	sp, #16
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]
    while(Len > 0)
 8000962:	e024      	b.n	80009ae <SPI_SendData+0x58>
    {
        /* Wait until TXE = 1 */
        while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000964:	bf00      	nop
 8000966:	2102      	movs	r1, #2
 8000968:	68f8      	ldr	r0, [r7, #12]
 800096a:	f7ff ffe1 	bl	8000930 <SPI_GetFlagStatus>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d0f8      	beq.n	8000966 <SPI_SendData+0x10>

        /* Check the DFF bit in CR1 */
        if ( (pSPIx->CR1 & (1 << SPI_CR1_DFF)) )
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800097c:	2b00      	cmp	r3, #0
 800097e:	d00b      	beq.n	8000998 <SPI_SendData+0x42>
        {
            /* 16 bit DFF */
            /* Load the data into the DR register */
            pSPIx->DR = *((uint16_t*)pTxBuffer); // Cast to uint16_t pointer and dereference
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	60da      	str	r2, [r3, #12]
            Len -= 2;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	3b02      	subs	r3, #2
 800098e:	607b      	str	r3, [r7, #4]
            (uint16_t*)pTxBuffer++; // Increment by 2 bytes
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	3301      	adds	r3, #1
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	e00a      	b.n	80009ae <SPI_SendData+0x58>
        }
        else
        {
            /* 8 bit DFF */
            /* Load the data into the DR register */
            pSPIx->DR = *pTxBuffer;
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	461a      	mov	r2, r3
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	60da      	str	r2, [r3, #12]
            Len--;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	3b01      	subs	r3, #1
 80009a6:	607b      	str	r3, [r7, #4]
            pTxBuffer++;
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	3301      	adds	r3, #1
 80009ac:	60bb      	str	r3, [r7, #8]
    while(Len > 0)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d1d7      	bne.n	8000964 <SPI_SendData+0xe>
        }
    }
    /* Wait until SPI is not busy */
    while(SPI_GetFlagStatus(pSPIx, SPI_SR_BSY) == FLAG_SET);
 80009b4:	bf00      	nop
 80009b6:	2107      	movs	r1, #7
 80009b8:	68f8      	ldr	r0, [r7, #12]
 80009ba:	f7ff ffb9 	bl	8000930 <SPI_GetFlagStatus>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d0f8      	beq.n	80009b6 <SPI_SendData+0x60>
}
 80009c4:	bf00      	nop
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <SPI_SSIConfig>:
 * @return            - none
 *
 * @Note              - none
 */
void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80009ce:	b480      	push	{r7}
 80009d0:	b083      	sub	sp, #12
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
 80009d6:	460b      	mov	r3, r1
 80009d8:	70fb      	strb	r3, [r7, #3]
    if (ENABLE == EnorDi)
 80009da:	78fb      	ldrb	r3, [r7, #3]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d106      	bne.n	80009ee <SPI_SSIConfig+0x20>
    {
        /* Set the SSI bit */
        pSPIx->CR1 |= (1 << SPI_CR1_SSI);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	601a      	str	r2, [r3, #0]
    else
    {
        /* Clear the SSI bit */
        pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
    }
}
 80009ec:	e005      	b.n	80009fa <SPI_SSIConfig+0x2c>
        pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	601a      	str	r2, [r3, #0]
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr

08000a04 <__libc_init_array>:
 8000a04:	b570      	push	{r4, r5, r6, lr}
 8000a06:	4d0d      	ldr	r5, [pc, #52]	@ (8000a3c <__libc_init_array+0x38>)
 8000a08:	4c0d      	ldr	r4, [pc, #52]	@ (8000a40 <__libc_init_array+0x3c>)
 8000a0a:	1b64      	subs	r4, r4, r5
 8000a0c:	10a4      	asrs	r4, r4, #2
 8000a0e:	2600      	movs	r6, #0
 8000a10:	42a6      	cmp	r6, r4
 8000a12:	d109      	bne.n	8000a28 <__libc_init_array+0x24>
 8000a14:	4d0b      	ldr	r5, [pc, #44]	@ (8000a44 <__libc_init_array+0x40>)
 8000a16:	4c0c      	ldr	r4, [pc, #48]	@ (8000a48 <__libc_init_array+0x44>)
 8000a18:	f000 f818 	bl	8000a4c <_init>
 8000a1c:	1b64      	subs	r4, r4, r5
 8000a1e:	10a4      	asrs	r4, r4, #2
 8000a20:	2600      	movs	r6, #0
 8000a22:	42a6      	cmp	r6, r4
 8000a24:	d105      	bne.n	8000a32 <__libc_init_array+0x2e>
 8000a26:	bd70      	pop	{r4, r5, r6, pc}
 8000a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a2c:	4798      	blx	r3
 8000a2e:	3601      	adds	r6, #1
 8000a30:	e7ee      	b.n	8000a10 <__libc_init_array+0xc>
 8000a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a36:	4798      	blx	r3
 8000a38:	3601      	adds	r6, #1
 8000a3a:	e7f2      	b.n	8000a22 <__libc_init_array+0x1e>
 8000a3c:	08000a70 	.word	0x08000a70
 8000a40:	08000a70 	.word	0x08000a70
 8000a44:	08000a70 	.word	0x08000a70
 8000a48:	08000a74 	.word	0x08000a74

08000a4c <_init>:
 8000a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a4e:	bf00      	nop
 8000a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a52:	bc08      	pop	{r3}
 8000a54:	469e      	mov	lr, r3
 8000a56:	4770      	bx	lr

08000a58 <_fini>:
 8000a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a5a:	bf00      	nop
 8000a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a5e:	bc08      	pop	{r3}
 8000a60:	469e      	mov	lr, r3
 8000a62:	4770      	bx	lr
