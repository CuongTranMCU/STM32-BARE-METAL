
006EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000194  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800032c  08000334  00001334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800032c  0800032c  00001334  2**0
                  CONTENTS
  4 .ARM          00000000  0800032c  0800032c  00001334  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800032c  08000334  00001334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800032c  0800032c  0000132c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000330  08000330  00001330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000334  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000334  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000011b  00000000  00000000  0000135e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000096  00000000  00000000  00001479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  00001510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000002d  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000fa6  00000000  00000000  00001585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000004df  00000000  00000000  0000252b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003de9  00000000  00000000  00002a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000067f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  00006838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  00006890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000314 	.word	0x08000314

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000314 	.word	0x08000314

080001d8 <main>:
#define GPIOC_MODER_REG_ADDR			(GPIOC_BASE_ADDR + GPIOC_MODER_OFFSET)
#define GPIOC_AFRH_OFFSET				0x24UL			// GPIOC alternate function high register: PC9(8->15-> high) (MCO_2)
#define GPIOC_AFRH_REG_ADDR				(GPIOC_BASE_ADDR + GPIOC_AFRH_OFFSET)

int main()
{
 80001d8:	b480      	push	{r7}
 80001da:	b087      	sub	sp, #28
 80001dc:	af00      	add	r7, sp, #0
	uint32_t *pRccCrReg = (uint32_t*)RCC_CR_REG_ADDR;
 80001de:	4b21      	ldr	r3, [pc, #132]	@ (8000264 <main+0x8c>)
 80001e0:	617b      	str	r3, [r7, #20]
	*pRccCrReg |= (1 << 16); // Enable HSE clock using HSE ON bit
 80001e2:	697b      	ldr	r3, [r7, #20]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80001ea:	697b      	ldr	r3, [r7, #20]
 80001ec:	601a      	str	r2, [r3, #0]
	// Wait until HSE clock from the external crystal stabilizes (only if crystal is connected)
	while(!(*pRccCrReg & (1 << 17)));
 80001ee:	bf00      	nop
 80001f0:	697b      	ldr	r3, [r7, #20]
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d0f9      	beq.n	80001f0 <main+0x18>
	// Switch the system clock to HSE (RCC_CFGR)
	uint32_t *pRccCfgrReg =  (uint32_t*) RCC_CFGR_REG_ADDR;
 80001fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000268 <main+0x90>)
 80001fe:	613b      	str	r3, [r7, #16]
	/* Config MCO_2 to HSE: 10 */
	*pRccCfgrReg |= (1 << 31); // Set bit 31 to select HSE as clock source for MCO_2
 8000200:	693b      	ldr	r3, [r7, #16]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000208:	693b      	ldr	r3, [r7, #16]
 800020a:	601a      	str	r2, [r3, #0]
	/* Configure MCO_2 prescaler to divide by 4: 110 */
	*pRccCfgrReg |= (1 << 28); // Set bit 28
 800020c:	693b      	ldr	r3, [r7, #16]
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000214:	693b      	ldr	r3, [r7, #16]
 8000216:	601a      	str	r2, [r3, #0]
	*pRccCfgrReg |= (1 << 29); // Set bit 29
 8000218:	693b      	ldr	r3, [r7, #16]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8000220:	693b      	ldr	r3, [r7, #16]
 8000222:	601a      	str	r2, [r3, #0]

	/* Config PC9 for MCO_2*/
	uint32_t *pRccAhb1Enr = (uint32_t*)RCC_AHB1ENR_REG_ADDR;
 8000224:	4b11      	ldr	r3, [pc, #68]	@ (800026c <main+0x94>)
 8000226:	60fb      	str	r3, [r7, #12]
	/* Enable GPIOC for alternative function */
	*pRccAhb1Enr |= (1 << 2); // Enable GPIOC peripheral clock
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f043 0204 	orr.w	r2, r3, #4
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	601a      	str	r2, [r3, #0]
	uint32_t *pGPIOCModeReg = (uint32_t*)(GPIOC_MODER_REG_ADDR);
 8000234:	4b0e      	ldr	r3, [pc, #56]	@ (8000270 <main+0x98>)
 8000236:	60bb      	str	r3, [r7, #8]
	*pGPIOCModeReg &= ~( 0x3 << 18); //clear
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	601a      	str	r2, [r3, #0]
	*pGPIOCModeReg |= ( 0x2 << 18);  //set
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	601a      	str	r2, [r3, #0]
	
	/* Configure Alternative High Register*/
	uint32_t* pGPIOCAfrhReg = (uint32_t* ) GPIOC_AFRH_REG_ADDR;
 8000250:	4b08      	ldr	r3, [pc, #32]	@ (8000274 <main+0x9c>)
 8000252:	607b      	str	r3, [r7, #4]
	*pGPIOCAfrhReg &= ~(0xF << 4); // Clear bits 4 to 7 for PC9
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	601a      	str	r2, [r3, #0]
	while(1);
 8000260:	bf00      	nop
 8000262:	e7fd      	b.n	8000260 <main+0x88>
 8000264:	40023800 	.word	0x40023800
 8000268:	40023808 	.word	0x40023808
 800026c:	40023830 	.word	0x40023830
 8000270:	40020800 	.word	0x40020800
 8000274:	40020824 	.word	0x40020824

08000278 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000278:	480d      	ldr	r0, [pc, #52]	@ (80002b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800027a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800027c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000280:	480c      	ldr	r0, [pc, #48]	@ (80002b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000282:	490d      	ldr	r1, [pc, #52]	@ (80002b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000284:	4a0d      	ldr	r2, [pc, #52]	@ (80002bc <LoopForever+0xe>)
  movs r3, #0
 8000286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000288:	e002      	b.n	8000290 <LoopCopyDataInit>

0800028a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800028a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800028c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800028e:	3304      	adds	r3, #4

08000290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000294:	d3f9      	bcc.n	800028a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000296:	4a0a      	ldr	r2, [pc, #40]	@ (80002c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000298:	4c0a      	ldr	r4, [pc, #40]	@ (80002c4 <LoopForever+0x16>)
  movs r3, #0
 800029a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800029c:	e001      	b.n	80002a2 <LoopFillZerobss>

0800029e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800029e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a0:	3204      	adds	r2, #4

080002a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a4:	d3fb      	bcc.n	800029e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002a6:	f000 f811 	bl	80002cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002aa:	f7ff ff95 	bl	80001d8 <main>

080002ae <LoopForever>:

LoopForever:
  b LoopForever
 80002ae:	e7fe      	b.n	80002ae <LoopForever>
  ldr   r0, =_estack
 80002b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002bc:	08000334 	.word	0x08000334
  ldr r2, =_sbss
 80002c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c4:	2000001c 	.word	0x2000001c

080002c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c8:	e7fe      	b.n	80002c8 <ADC_IRQHandler>
	...

080002cc <__libc_init_array>:
 80002cc:	b570      	push	{r4, r5, r6, lr}
 80002ce:	4d0d      	ldr	r5, [pc, #52]	@ (8000304 <__libc_init_array+0x38>)
 80002d0:	4c0d      	ldr	r4, [pc, #52]	@ (8000308 <__libc_init_array+0x3c>)
 80002d2:	1b64      	subs	r4, r4, r5
 80002d4:	10a4      	asrs	r4, r4, #2
 80002d6:	2600      	movs	r6, #0
 80002d8:	42a6      	cmp	r6, r4
 80002da:	d109      	bne.n	80002f0 <__libc_init_array+0x24>
 80002dc:	4d0b      	ldr	r5, [pc, #44]	@ (800030c <__libc_init_array+0x40>)
 80002de:	4c0c      	ldr	r4, [pc, #48]	@ (8000310 <__libc_init_array+0x44>)
 80002e0:	f000 f818 	bl	8000314 <_init>
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	10a4      	asrs	r4, r4, #2
 80002e8:	2600      	movs	r6, #0
 80002ea:	42a6      	cmp	r6, r4
 80002ec:	d105      	bne.n	80002fa <__libc_init_array+0x2e>
 80002ee:	bd70      	pop	{r4, r5, r6, pc}
 80002f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80002f4:	4798      	blx	r3
 80002f6:	3601      	adds	r6, #1
 80002f8:	e7ee      	b.n	80002d8 <__libc_init_array+0xc>
 80002fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80002fe:	4798      	blx	r3
 8000300:	3601      	adds	r6, #1
 8000302:	e7f2      	b.n	80002ea <__libc_init_array+0x1e>
 8000304:	0800032c 	.word	0x0800032c
 8000308:	0800032c 	.word	0x0800032c
 800030c:	0800032c 	.word	0x0800032c
 8000310:	08000330 	.word	0x08000330

08000314 <_init>:
 8000314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000316:	bf00      	nop
 8000318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800031a:	bc08      	pop	{r3}
 800031c:	469e      	mov	lr, r3
 800031e:	4770      	bx	lr

08000320 <_fini>:
 8000320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000322:	bf00      	nop
 8000324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000326:	bc08      	pop	{r3}
 8000328:	469e      	mov	lr, r3
 800032a:	4770      	bx	lr
